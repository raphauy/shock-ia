
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]  
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  url                   String?
  slug                  String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  users                 User[]
  documents             Document[]
  conversations         Conversation[]
  whatsappEndpoint      String?
  prompt                String?   @db.Text
  promptTokensPrice     Float      @default(0)
  completionTokensPrice Float  @default(0)

  functions             ClientFunction[]

  // Todo: make this field not optional
  model                 Model?    @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId               String?

  repoData              RepoData[]                         // gennext: skip.list
}

model Document {
  id                     String   @id @default(cuid())
  name                   String                               // gennext: show.column
  description            String?                              // gennext: show.column
  jsonContent            String?  @db.Text                    
  textContent            String?  @db.Text                    // gennext: show.column
  type                   String   @default("text")            // gennext: skip.zod
  fileSize               Int?
  wordsCount             Int?     @default(0)                 // gennext: show.column
  status                 String   @default("pending")         // gennext: skip.zod

  externalId             String?                              // gennext: skip.zod
  url                    String?                              // gennext: skip.zod

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod show.column

  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId              String

  sections              Section[]                             // gennext: skip.list
}

model Section {
  id                    String   @id @default(cuid())
  secuence              Int                                   // gennext: show.column
  tokenCount            Int                                   // gennext: show.column
  status                String   @default("pending")          // gennext: show.column

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod

  document              Document @relation(fields: [documentId], references: [id], onDelete: Cascade) // gennext: skip.list
  documentId            String                                

  text                  String  @db.Text                      // gennext: show.column
  embedding Unsupported("vector(3072)")?                      // gennext: skip.zod
	@@map("Section")                                            // gennext: skip.list
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String
  messages    Message[]
  client      Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  operacion   String?
  tipo        String?
  zona        String?
  presupuesto String?

  narvaez     Narvaez?
  summit      Summit?
  carService  CarService?

  repoData    RepoData[]
}

model Message {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              String
  content           String      @db.Text
  gptData           String?     @db.Text
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
}

model Config {
  id             String       @id @default(cuid())
  name           String       @unique
  value          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model MessageSection {
  id                String      @id @default(cuid())
  messageId         String
  sectionId         String

  @@unique([messageId, sectionId])
}

model Function {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column
  description    String?                          // gennext: show.column
  definition     String?      @db.Text            // gennext: show.column
  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  clients        ClientFunction[]                 // gennext: skip.list
  repositories   Repository[]                     // gennext: skip.list
	@@map("Function")                               // gennext: skip.list
}

model ClientFunction {
  webHookUrl     String?      @db.Text            // gennext: show.column
  uiLabel        String       @default("Informaci√≥n") // gennext: show.column

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  function  Function @relation(fields: [functionId], references: [id])
  functionId String
  
  @@id([clientId, functionId])
	@@map("ClientFunction")
}

model Narvaez {
  id             String       @id @default(cuid())
  idTrackeo      String?                     // gennext: show.column  
  urlPropiedad   String?                     // gennext: show.column
  idPropiedad    String?                     // gennext: show.column
  resumenPedido  String?      @db.Text              // gennext: show.column
  clasificacion  String?      @default("General")   // gennext: show.column
  consulta       String?      @default("")          // gennext: show.column

  nombre         String?      @default("")          // gennext: show.column
  telefono       String?      @default("")          // gennext: show.column
  email          String?      @default("")          // gennext: show.column
  horarioContacto String?     @default("")          // gennext: show.column
  consultaAdicional String?    @default("")          // gennext: show.column
  createdAt      DateTime     @default(now())       // gennext: skip.zod 
  updatedAt      DateTime     @updatedAt            // gennext: skip.zod show.column

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String @unique
}

model Summit {
  id                  String        @id @default(cuid())
  nombreReserva       String?       @default("")           // gennext: show.column
  nombreCumpleanero   String?       @default("")             // gennext: show.column
  cantidadInvitados   Int?          @default(0)              // gennext: show.column
  fechaReserva        String?       @default("")          // gennext: show.column
  email               String?       @default("")           // gennext: show.column
  resumenConversacion String?       @default("")              // gennext: show.column

  createdAt           DateTime     @default(now())         // gennext: skip.zod
  updatedAt           DateTime     @updatedAt              // gennext: skip.zod show.column

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId     String @unique
}

model Provider {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column

  apiKey         String       @db.Text
  baseUrl        String       @db.Text            // gennext: show.column
  streaming      Boolean      @default(false)     // gennext: show.column
  
  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  models         Model[]                          // gennext: skip.list
}

model Model {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column
  inputPrice     Float        @default(0)         // gennext: show.column
  outputPrice    Float        @default(0)         // gennext: show.column
  providerName   String       @default("")        // gennext: show.column
  streaming      Boolean      @default(false)     // gennext: show.column
  contextSize    Int          @default(2048)      // gennext: show.column

  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  provider       Provider     @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId     String

  clients        Client[]                         // gennext: skip.list
}

model CarService {
  id                  String       @id @default(cuid())
  nombreReserva       String      @default("")           // gennext: show.column
  telefonoContacto    String      @default("")           // gennext: show.column
  fechaReserva        String      @default("")           // gennext: show.column
  localReserva        String      @default("")           // gennext: show.column
  marcaAuto           String      @default("")           // gennext: show.column
  modeloAuto          String      @default("")           // gennext: show.column
  matriculaAuto       String      @default("")           // gennext: show.column
  kilometraje         String      @default("")           // gennext: show.column

  createdAt           DateTime     @default(now())         // gennext: skip.zod
  updatedAt           DateTime     @updatedAt              // gennext: skip.zod show.column

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId     String @unique

}

model Repository {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  color               String       @default("rgb(68, 190, 154)")
  
  functionName        String       @unique               // gennext: show.column
  functionDescription String                             // gennext: show.column
  functionActive      Boolean      @default(false)       // gennext: show.column
  notifyExecution     Boolean      @default(false)       // gennext: show.column
  conversationLLMOff  Boolean      @default(false)       // gennext: show.column

  finalMessage        String?                            // gennext: show.column
  llmOffMessage       String?                            // gennext: show.column

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod

  fields              Field[]                            // gennext: skip.list

  function  Function @relation(fields: [functionId], references: [id])
  functionId String

  repoData            RepoData[]                         // gennext: skip.list
}

enum FieldType {
  string
  number
  boolean
}

model Field {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  type                FieldType                          // gennext: show.column
  description         String                             // gennext: show.column
  required            Boolean                            // gennext: show.column
  order               Int       @default(0)

  repository          Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId        String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model RepoData {
  id                  String       @id @default(cuid())
  repoName            String                              // gennext: show.column
  phone               String                              // gennext: show.column
  functionName        String                              // gennext: show.column

  data                String                                // gennext: show.column

  repository          Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  repositoryId        String?

  client              Client @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId            String

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId      String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}
