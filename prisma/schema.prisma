generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]  
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String?

  comercial     Comercial?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum InboxProvider {
  OSOM
  WRC
  CHATWOOT
}

model Client {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  whatsappNumbers       String?
  url                   String?
  slug                  String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  users                 User[]
  documents             Document[]
  conversations         Conversation[]
  whatsappEndpoint      String?
  prompt                String?   @db.Text
  promptTokensPrice     Float      @default(0)
  completionTokensPrice Float  @default(0)
  haveEvents            Boolean   @default(false)
  haveAgents            Boolean   @default(false)
  haveCRM               Boolean   @default(false)
  haveAudioResponse     Boolean   @default(false)
  haveProducts          Boolean   @default(false)
  wapSendFrequency      Int       @default(30)

  availability          String[]  @default([])
  timezone              String    @default("America/Montevideo")

  apiKey                String @default(uuid()) @unique

  functions             ClientFunction[]

  // Todo: make this field not optional
  model                 Model?    @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId               String?

  repoData              RepoData[]                         // gennext: skip.list
  events                Event[]                            // gennext: skip.list
  bookings              Booking[]                          // gennext: skip.list

  whatsappInstances     WhatsappInstance[]
  inboxProvider         InboxProvider @default(OSOM)

  contacts              Contact[]      // gennext: skip.list
  customFields          CustomField[]  // gennext: skip.list
  stages                Stage[]        // gennext: skip.list
  tags                  String[]       // gennext: skip.list
  campaigns             Campaign[]     // gennext: skip.list

  importedContacts      ImportedContact[]
  reminderDefinitions   ReminderDefinition[]

  comerciales           Comercial[]

  notifications         Notification[]
  promptVersions        PromptVersion[]

  ecommerceFeeds        EcommerceFeed[]
  products              Product[]
  abandonedOrders       AbandonedOrder[]
}

model Document {
  id                     String   @id @default(cuid())
  name                   String                               // gennext: show.column
  description            String?                              // gennext: show.column
  jsonContent            String?  @db.Text                    
  textContent            String?  @db.Text                    // gennext: show.column
  type                   String   @default("text")            // gennext: skip.zod
  fileSize               Int?
  wordsCount             Int?     @default(0)                 // gennext: show.column
  status                 String   @default("pending")         // gennext: skip.zod

  externalId             String?                              // gennext: skip.zod
  url                    String?                              // gennext: skip.zod

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod show.column

  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId              String

  sections              Section[]                             // gennext: skip.list
}

model Section {
  id                    String   @id @default(cuid())
  secuence              Int                                   // gennext: show.column
  tokenCount            Int                                   // gennext: show.column
  status                String   @default("pending")          // gennext: show.column

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod

  document              Document @relation(fields: [documentId], references: [id], onDelete: Cascade) // gennext: skip.list
  documentId            String                                

  text                  String  @db.Text                      // gennext: show.column
  embedding Unsupported("vector(3072)")?                      // gennext: skip.zod
	@@map("Section")                                            // gennext: skip.list
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String
  messages    Message[]
  client      Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  operacion   String?
  tipo        String?
  zona        String?
  presupuesto String?

  closed      Boolean  @default(false)
  lastMessageWasAudio Boolean @default(false)

  narvaez     Narvaez?
  summit      Summit?
  carService  CarService?

  chatwootConversationId Int?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  contactId   String?

  repoData    RepoData[]
  bookings    Booking[]
}

model Message {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              String
  content           String      @db.Text
  gptData           String?     @db.Text
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
}

model Config {
  id             String       @id @default(cuid())
  name           String       @unique
  value          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model MessageSection {
  id                String      @id @default(cuid())
  messageId         String
  sectionId         String

  @@unique([messageId, sectionId])
}

model Function {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column
  description    String?                          // gennext: show.column
  definition     String?      @db.Text            // gennext: show.column
  tags           String[]                         // gennext: show.column
  
  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  clients        ClientFunction[]                 // gennext: skip.list
  repositories   Repository[]                     // gennext: skip.list
	@@map("Function")                               // gennext: skip.list
}

model ClientFunction {
  webHookUrl     String?      @db.Text            // gennext: show.column
  uiLabel        String       @default("Informaci√≥n") // gennext: show.column
  notifyPhones   String[]     @default([])         // gennext: show.column

  tags           String[]                         // gennext: show.column
  moveToStageId  String?
  assignToComercial Boolean @default(false)

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  function  Function @relation(fields: [functionId], references: [id])
  functionId String
  
  @@id([clientId, functionId])
	@@map("ClientFunction")
}

model Narvaez {
  id             String       @id @default(cuid())
  idTrackeo      String?                     // gennext: show.column  
  urlPropiedad   String?                     // gennext: show.column
  idPropiedad    String?                     // gennext: show.column
  resumenPedido  String?      @db.Text              // gennext: show.column
  clasificacion  String?      @default("General")   // gennext: show.column
  consulta       String?      @default("")          // gennext: show.column

  nombre         String?      @default("")          // gennext: show.column
  telefono       String?      @default("")          // gennext: show.column
  email          String?      @default("")          // gennext: show.column
  horarioContacto String?     @default("")          // gennext: show.column
  consultaAdicional String?    @default("")          // gennext: show.column
  createdAt      DateTime     @default(now())       // gennext: skip.zod 
  updatedAt      DateTime     @updatedAt            // gennext: skip.zod show.column

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String @unique
}

model Summit {
  id                  String        @id @default(cuid())
  nombreReserva       String?       @default("")           // gennext: show.column
  nombreCumpleanero   String?       @default("")             // gennext: show.column
  cantidadInvitados   Int?          @default(0)              // gennext: show.column
  fechaReserva        String?       @default("")          // gennext: show.column
  email               String?       @default("")           // gennext: show.column
  resumenConversacion String?       @default("")              // gennext: show.column

  createdAt           DateTime     @default(now())         // gennext: skip.zod
  updatedAt           DateTime     @updatedAt              // gennext: skip.zod show.column

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId     String @unique
}

model Provider {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column

  apiKey         String       @db.Text
  baseUrl        String       @db.Text            // gennext: show.column
  streaming      Boolean      @default(false)     // gennext: show.column
  
  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  models         Model[]                          // gennext: skip.list
}

model Model {
  id             String       @id @default(cuid())
  name           String       @unique             // gennext: show.column
  inputPrice     Float        @default(0)         // gennext: show.column
  outputPrice    Float        @default(0)         // gennext: show.column
  providerName   String       @default("")        // gennext: show.column
  streaming      Boolean      @default(false)     // gennext: show.column
  contextSize    Int          @default(2048)      // gennext: show.column

  createdAt      DateTime     @default(now())     // gennext: skip.zod
  updatedAt      DateTime     @updatedAt          // gennext: skip.zod

  provider       Provider     @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId     String

  clients        Client[]                         // gennext: skip.list
}

model CarService {
  id                  String       @id @default(cuid())
  nombreReserva       String      @default("")           // gennext: show.column
  telefonoContacto    String      @default("")           // gennext: show.column
  fechaReserva        String      @default("")           // gennext: show.column
  localReserva        String      @default("")           // gennext: show.column
  marcaAuto           String      @default("")           // gennext: show.column
  modeloAuto          String      @default("")           // gennext: show.column
  matriculaAuto       String      @default("")           // gennext: show.column
  kilometraje         String      @default("")           // gennext: show.column

  createdAt           DateTime     @default(now())         // gennext: skip.zod
  updatedAt           DateTime     @updatedAt              // gennext: skip.zod show.column

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId     String @unique

}

model Repository {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  color               String       @default("rgb(68, 190, 154)")
  
  functionName        String       @unique               // gennext: show.column
  functionDescription String                             // gennext: show.column
  functionActive      Boolean      @default(false)       // gennext: show.column
  notifyExecution     Boolean      @default(false)       // gennext: show.column
  conversationLLMOff  Boolean      @default(false)       // gennext: show.column

  finalMessage        String?                            // gennext: show.column
  llmOffMessage       String?                            // gennext: show.column

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod

  fields              Field[]                            // gennext: skip.list

  function  Function @relation(fields: [functionId], references: [id])
  functionId String

  repoData            RepoData[]                         // gennext: skip.list
}

enum FieldType {
  string
  number
  boolean
  list
}

model Field {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  type                FieldType                          // gennext: show.column
  description         String                             // gennext: show.column
  required            Boolean                            // gennext: show.column
  order               Int       @default(0)
  etiquetar           Boolean    @default(false)
  listOptions         String[]                           // gennext: show.column
  repository          Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId        String?

  event               Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId             String?

  linkedCustomField   CustomField? @relation(fields: [linkedCustomFieldId], references: [id], onDelete: SetNull)
  linkedCustomFieldId String?

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model RepoData {
  id                  String       @id @default(cuid())
  repoName            String                              // gennext: show.column
  phone               String                              // gennext: show.column
  functionName        String                              // gennext: show.column

  data                String                                // gennext: show.column

  repository          Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  repositoryId        String?

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId      String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

enum EventType {
  SINGLE_SLOT
  MULTIPLE_SLOTS
  FIXED_DATE
}

model Event {
  id                String    @id @default(cuid())
  name              String                                      // gennext: show.column
  slug              String                                      // gennext: show.column
  minDuration       Int?                                        // gennext: show.column
  maxDuration       Int?                                        // gennext: show.column
  color             String                                      // gennext: show.column
  tags              String[]                                    // gennext: show.column
  webHookUrl        String?                                     // gennext: show.column
  notifyPhones      String[]                                    // gennext: show.column

  description       String?
  address           String?                                     // gennext: show.column
  seatsPerTimeSlot  Int?                                        // gennext: show.column
  seatsAvailable    Int?                                        // gennext: show.column
  price             Float?                                      // gennext: show.column
  isArchived        Boolean   @default(false)                   // gennext: show.column
  confirmationTemplate String?

  moveToStageId  String?

  availability      String[]  @default([])
  timezone          String    @default("America/Montevideo")
  type              EventType @default(SINGLE_SLOT)

  startDateTime     DateTime? // For FIXED_DATE
  endDateTime       DateTime? // For FIXED_DATE

  createdAt         DateTime    @default(now())                 // gennext: skip.zod
  updatedAt         DateTime    @updatedAt                      // gennext: skip.zod

  client            Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          String

  bookings          Booking[]                            // gennext: skip.list
  reminderDefinitions EventReminderDefinition[]               // gennext: skip.list

  metadata          String?
  askInSequence     Boolean   @default(false)
  fields            Field[]                            // gennext: skip.list
}

enum BookingStatus {
  PENDIENTE
  RESERVADO
  PAGADO
  CONFIRMADO
  CANCELADO
  BLOQUEADO
}

model Booking {
  id                String    @id @default(cuid())
  eventName         String                                      // gennext: show.column
  start             DateTime                                     // gennext: show.column
  end               DateTime                                     // gennext: show.column
  seats             Int                                         // gennext: show.column
  price             Float?                                      // gennext: show.column
  status            BookingStatus                               // gennext: show.column

  name              String
  contact           String
  data              String?

  createdAt         DateTime    @default(now())                 // gennext: skip.zod
  updatedAt         DateTime    @updatedAt                      // gennext: skip.zod
  confirmationDate  DateTime?

  // reminders
  reminders         Reminder[]                                 // gennext: skip.list
  notification      Notification?                              // gennext: skip.list

  event             Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           String

  client            Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          String

  conversation      Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  conversationId    String?
}

model WhatsappInstance {
  id                  String @id @default(cuid())
  externalId          String
  name                String
  number              String?

  chatwootAccountId   String?
  chatwootUrl         String?
  chatwootAccessToken String?

  whatsappInboxId     String?

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model Contact {
  id            String      @id @default(cuid())
  chatwootId    String?
  name          String                                      // gennext: show.column
  phone         String?                                     // gennext: show.column
  imageUrl      String?                                     // gennext: show.column
  tags          String[]                                    // gennext: show.column

  src           String                                      // gennext: show.column

  order         Int         @default(0)

  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  stage         Stage      @relation(fields: [stageId], references: [id], onDelete: Restrict)
  stageId       String

  comercial     Comercial? @relation(fields: [comercialId], references: [id], onDelete: SetNull)
  comercialId   String?

  fieldValues   FieldValue[]                               // gennext: skip.list
  stageHistory  StageHistory[]                           // gennext: skip.list
  conversations Conversation[]                         // gennext: skip.list
  contactEvents ContactEvent[]                         // gennext: skip.list
  campaigns     CampaignContact[]                       // gennext: skip.list
  reminders     Reminder[]                               // gennext: skip.list

  createdAt     DateTime    @default(now())                 // gennext: skip.zod
  updatedAt     DateTime    @updatedAt                      // gennext: skip.zod

  @@unique([clientId, chatwootId])
}

model CustomField {
  id            String     @id @default(cuid())            
  name          String                                      // gennext: show.column
  description   String?                                     // gennext: show.column
  type          FieldType                                   // gennext: show.column
  order         Int                                         // gennext: show.column
  showInContext Boolean @default(true)                     // gennext: show.column

  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  fieldValues   FieldValue[]                               // gennext: skip.list

  linkedFields     Field[]
  
  createdAt     DateTime   @default(now())                 // gennext: skip.zod
  updatedAt     DateTime   @updatedAt                      // gennext: skip.zod
}

model Stage {
  id          String     @id @default(cuid())            
  name        String                                      // gennext: show.column
  description String?                                     // gennext: show.column
  order       Int                                         // gennext: show.column
  isFinal     Boolean    @default(false)                  // gennext: show.column
  isBotEnabled Boolean    @default(false)                  // gennext: show.column
  color       String?                                     // gennext: show.column

  client      Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String

  contacts    Contact[]                                  // gennext: skip.list
  stageHistory StageHistory[]                            // gennext: skip.list
  
  createdAt   DateTime   @default(now())                 // gennext: skip.zod
  updatedAt   DateTime   @updatedAt                      // gennext: skip.zod
}

model FieldValue {
  id           String     @id @default(cuid())           
  value        String                                      // gennext: show.column

  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId    String

  customField  CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  
  createdAt    DateTime   @default(now())                 // gennext: skip.zod
  updatedAt    DateTime   @updatedAt                      // gennext: skip.zod
}

model StageHistory {
  id            String     @id @default(cuid())       
  startDate     DateTime                               // gennext: show.column
  endDate       DateTime?                              // gennext: show.column
  durationHours Float                                  // gennext: show.column

  contact       Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId     String

  stage         Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId       String

  createdAt     DateTime   @default(now())             // gennext: skip.zod
  updatedAt     DateTime   @updatedAt                  // gennext: skip.zod
}

enum ContactEventType {
  CREATED
  TAGGED
  UNTAGGED
  MOVED_TO_STAGE
  EDITED
  CUSTOM_FIELD_VALUE_UPDATED
}

model ContactEvent {
  id            String     @id @default(cuid())       
  type          ContactEventType                       // gennext: show.column
  info          String?                                // gennext: show.column
  by            String?                                // gennext: show.column

  contact       Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId     String

  createdAt     DateTime   @default(now())             // gennext: skip.zod
}

enum CampaignType {
  SIMPLE
}

enum CampaignStatus {
  CREADA
  EN_PROCESO
  COMPLETADA
  EN_PAUSA
  CANCELADA
}

model Campaign {
  id            String     @id @default(cuid())       
  type          CampaignType                            // gennext: show.column
  name          String                                  // gennext: show.column
  status        CampaignStatus                          // gennext: show.column
  tags          String[]
  moveToStageId String?

  message       String @default("Estimado {{nombre}}, le escribimos para...")

  contacts      CampaignContact[]                       // gennext: skip.list

  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  createdAt     DateTime   @default(now())             // gennext: skip.zod
  updatedAt     DateTime   @updatedAt                  // gennext: skip.zod
}

enum CampaignContactStatus {
  PENDIENTE
  PROGRAMADO
  ENVIADO
  ERROR
  CANCELADO
}

model CampaignContact {
  id              String     @id @default(cuid())
  status          CampaignContactStatus @default(PENDIENTE)

  conversationId  String?
  sentAt          DateTime?

  scheduleId      String?
  scheduledAt     DateTime?
  scheduledTo     DateTime?

  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId       String

  campaign        Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId      String

  createdAt       DateTime   @default(now())             // gennext: skip.zod
  updatedAt       DateTime   @updatedAt                  // gennext: skip.zod
}

enum ImportedContactStatus {
  PENDIENTE
  PROCESADO
  ERROR
}

enum ImportedContactType {
  API
  CSV
  MANUAL
}

model ImportedContact {
  id                 String      @id @default(cuid())
  name               String                                      // gennext: show.column
  phone              String                                      // gennext: show.column
  tags               String[]                                    // gennext: show.column
  stageName          String?                                     // gennext: show.column

  chatwootContactId  String?

  status             ImportedContactStatus @default(PENDIENTE) // gennext: show.column
  error              String?                                   // gennext: show.column

  type               ImportedContactType @default(MANUAL)

  client             Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String

  createdAt          DateTime   @default(now())                 // gennext: skip.zod
  updatedAt          DateTime   @updatedAt                      // gennext: skip.zod
}

model ReminderDefinition {
  id                 String      @id @default(cuid())
  name               String                                     // gennext: show.column
  description        String?                                    // gennext: show.column
  message            String                                     // gennext: show.column
  minutesDelay       Int                                        // Nueva columna opcional
  past               Boolean     @default(true)                 // NUEVO CAMPO: Indica si es para recordatorios pasados (true) o futuros (false)

  client             Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String

  reminders          Reminder[]                                 // gennext: skip.list

  events             EventReminderDefinition[]                                    // gennext: skip.list

  createdAt          DateTime   @default(now())                 // gennext: skip.zod
  updatedAt          DateTime   @updatedAt                      // gennext: skip.zod
}

model EventReminderDefinition {
  event              Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId            String

  reminderDefinition ReminderDefinition @relation(fields: [reminderDefinitionId], references: [id], onDelete: Cascade)
  reminderDefinitionId String

  createdAt          DateTime   @default(now())                 // gennext: skip.zod
  updatedAt          DateTime   @updatedAt                      // gennext: skip.zod

  @@unique([eventId, reminderDefinitionId])
}

enum ReminderStatus {
  PENDIENTE
  PROGRAMADO
  ENVIADO
  CANCELADO
  ERROR
}

enum ReminderType {
  GENERIC
  BOOKING
  ABANDONED_ORDER
}

model Reminder {
  id                 String      @id @default(cuid())
  status             ReminderStatus @default(PENDIENTE)         // gennext: show.column
  type               ReminderType @default(GENERIC)             // gennext: show.column
  eventTime          DateTime                                   // gennext: show.column
  scheduledFor       DateTime                                   // gennext: show.column
  message            String                                     // gennext: show.column
  conversationId     String?
  scheduledId        String?

  sentAt             DateTime?                                  // gennext: show.column
  error              String?                                    // gennext: show.column

  contact            Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId          String

  reminderDefinition ReminderDefinition @relation(fields: [reminderDefinitionId], references: [id], onDelete: Cascade)
  reminderDefinitionId String

  booking            Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId          String?

  abandonedOrder     AbandonedOrder? @relation(fields: [abandonedOrderId], references: [id], onDelete: Cascade)
  abandonedOrderId   String?

  createdAt          DateTime   @default(now())                 // gennext: skip.zod
  updatedAt          DateTime   @updatedAt                      // gennext: skip.zod
}

model Comercial {
  id                 String    @id @default(cuid())
  chatwootUserId     Int?                                          // gennext: show.column
  chatwootUserName   String?                                       // gennext: show.column
  activo             Boolean   @default(true)                      // gennext: show.column
  lastAssignedAt     DateTime  @default(now())                     // gennext: show.column
  notifyAssigned     Boolean   @default(true)                      // gennext: show.column
  phone              String?                                       // gennext: show.column

  user               User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId             String    @unique

  contacts           Contact[]                                     // gennext: skip.list
  
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String

  createdAt          DateTime  @default(now())                     // gennext: skip.zod
  updatedAt          DateTime  @updatedAt                          // gennext: skip.zod
}

enum NotificationType {
  BOOKING_CONFIRMATION
}

model Notification {
  id                 String    @id @default(cuid())
  phone              String                                          // gennext: show.column
  message            String                                          // gennext: show.column
  type               NotificationType @default(BOOKING_CONFIRMATION) // gennext: show.column
  sentAt             DateTime @default(now())                        // gennext: show.column
  error              String?                                         // gennext: show.column

  booking            Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId          String?   @unique

  client             Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String
}

model PromptVersion {
  id                  String       @id @default(cuid())
  content             String
  timestamp           DateTime     @default(now())
  user                String

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
}

enum EcommerceProvider {
  FENICIO
  SHOPIFY
  WIX
  WOOCOMMERCE
  OTHER
}

model EcommerceFeed {
  id                  String       @id @default(cuid())
  name                String                             // Nombre descriptivo del feed
  provider            EcommerceProvider @default(FENICIO) // Proveedor del ecommerce
  url                 String                             // URL del feed de productos
  format              String       @default("google")    // Formato del feed (google, facebook, etc)
  active              Boolean      @default(true)        // Si el feed est√° activo
  lastSync            DateTime?                          // √öltima sincronizaci√≥n exitosa
  syncFrequency       Int          @default(1440)        // Frecuencia de sincronizaci√≥n en minutos (por defecto 24h)
  totalProductsInFeed Int          @default(0)           // Total de productos disponibles en el feed

  abandonedOrdersTemplateId String?
  abandonedOrderExpireTime Int @default(48)
  
  client              Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  products            Product[]                         // Productos asociados a este feed
  
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Product {
  id                  String       @id @default(cuid())
  externalId          String                            // ID del producto en el sistema original
  groupId             String?                           // ID del grupo de productos (variantes)
  title               String                            // T√≠tulo/nombre del producto
  description         String       @db.Text             // Descripci√≥n completa
  link                String                            // URL al producto
  availability        String       @default("in stock") // Disponibilidad (in stock, out of stock, etc)
  price               Decimal                           // Precio normal
  currency            String       @default("UYU")      // Moneda del precio
  salePrice           Decimal?                          // Precio de oferta (si aplica)
  brand               String?                           // Marca
  condition           String       @default("new")      // Condici√≥n (new, used, etc)
  adult               Boolean      @default(false)      // Si es contenido para adultos
  category            String?                           // Categor√≠a/tipo de producto
  size                String?                           // Talla si aplica
  
  imageUrl            String                            // URL de la imagen principal
  additionalImages    String[]     @default([])         // URLs de im√°genes adicionales
  tags                String[]     @default([])         // Etiquetas o labels personalizados
  
  embedding           Unsupported("vector(1536)")?      // Vector de embeddings para b√∫squeda sem√°ntica
  embeddingUpdatedAt  DateTime?                         // √öltima actualizaci√≥n del embedding
  contentHash         String?                           // Hash MD5 del contenido relevante para el embedding
  
  feed                EcommerceFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId              String
  
  client              Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
  
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  
  @@unique([clientId, externalId])
}

enum AbandonedOrderStatus {
  PENDIENTE
  RECORDATORIO_PROGRAMADO
  RECORDATORIO_ENVIADO
  EXPIRADA
  ERROR
}

model AbandonedOrder {
  id                  String       @id @default(cuid())
  externalId          String                                          // gennext: show.column
  status              AbandonedOrderStatus @default(PENDIENTE)        // gennext: show.column

  fechaInicio         DateTime                                        // gennext: show.column
  fechaAbandono       DateTime                                        // gennext: show.column
  compradorNombre     String                                          // gennext: show.column
  compradorTelefono   String                                          // gennext: show.column
  productos           String[]                                        // gennext: show.column

  impuestos           Decimal?                                        // gennext: show.column
  importeTotal        Decimal                                         // gennext: show.column

  fechaRecordatorio   DateTime?
  error               String?                                         // gennext: show.column

  conversationId      String?

  client              Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  reminders           Reminder[]                                      // gennext: skip.list

  createdAt          DateTime  @default(now())                     // gennext: skip.zod
  updatedAt          DateTime  @updatedAt                          // gennext: skip.zod
}